#include "Human.h"
#include <cmath>
#include <iostream>

Human::Human() : firstName(""), lastName(""), age(0), weight(0.0), height(0.0), ageGroup(age::ADULT) {
    std::cout << "Конструктор по умолчанию вызван" << std::endl;
}

Human::Human(std::string fName, std::string lName, int a, double w, double h, age::AgeGroup ageGrp)
    : firstName(fName), lastName(lName), age(a), weight(w), height(h), ageGroup(ageGrp) {
    std::cout << "Параметризованный конструктор вызван" << std::endl;
}

Human::~Human() {
    std::cout << "Деструктор вызван для " << firstName << " " << lastName << std::endl;
}

double Human::calculateBMI() const {
    return (weight / (height * height));
}

int Human::calculateYearOfBirth() const {
    int currentYear = 2024; // Текущий год 2024
    return currentYear - age;
}

void Human::print() const {
    std::cout << "Name: " << firstName << " " << lastName << std::endl;
    std::cout << "Age: " << age << std::endl;
    std::cout << "Weight: " << weight << std::endl;
    std::cout << "Height: " << height << std::endl;
    std::cout << "BMI: " << calculateBMI() << std::endl;
    std::cout << "Year of Birth: " << calculateYearOfBirth() << std::endl;
    std::cout << "Age Group: " << (ageGroup == age::CHILD ? "Child" :
        ageGroup == age::TEENAGER ? "Teenager" :
        ageGroup == age::ADULT ? "Adult" : "Senior") << std::endl;
}

void Human::setAttributes(std::string fName, std::string lName, int a, double w, double h, age::AgeGroup ageGrp) {
    firstName = fName;
    lastName = lName;
    age = a;
    weight = w;
    height = h;
    ageGroup = ageGrp;
}

// Перегруженные операторы
Human& Human::operator++() {
    height += 0.1;
    return *this;
}

Human& Human::operator--() {
    height -= 0.1;
    return *this;
}

bool Human::operator<(const Human& other) const {
    return height < other.height;
}

bool Human::operator>(const Human& other) const {
    return height > other.height;
}

std::ostream& operator<<(std::ostream& os, const Human& h) {
    os << "Name: " << h.firstName << " " << h.lastName << std::endl;
    os << "Age: " << h.age << std::endl;
    os << "Weight: " << h.weight << std::endl;
    os << "Height: " << h.height << std::endl;
    os << "BMI: " << h.calculateBMI() << std::endl;
    os << "Year of Birth: " << h.calculateYearOfBirth() << std::endl;
    os << "Age Group: " << (h.ageGroup == age::CHILD ? "Child" :
        h.ageGroup == age::TEENAGER ? "Teenager" :
        h.ageGroup == age::ADULT ? "Adult" : "Senior") << std::endl;
    return os;
}

// Геттеры и сеттеры
std::string Human::getFirstName() const {
    return firstName;
}

void Human::setFirstName(const std::string& fName) {
    if (!fName.empty()) {
        firstName = fName;
    }
}

std::string Human::getLastName() const {
    return lastName;
}

void Human::setLastName(const std::string& lName) {
    if (!lName.empty()) {
        lastName = lName;
    }
}

int Human::getAge() const {
    return age;
}

void Human::setAge(int a) {
    if (a > 0 && a < 120) {
        age = a;
    }
}

double Human::getWeight() const {
    return weight;
}

void Human::setWeight(double w) {
    if (w > 0) {
        weight = w;
    }
}

double Human::getHeight() const {
    return height;
}

void Human::setHeight(double h) {
    if (h > 0) {
        height = h;
    }
}

age::AgeGroup Human::getAgeGroup() const {
    return ageGroup;
}

void Human::setAgeGroup(age::AgeGroup ageGrp) {
    ageGroup = ageGrp;
}