#pragma once
#include <iostream>
#include <string>

namespace age {
    enum Mileage {
        LOW = 50000,
        MEDIUM = 100000,
        HIGH = 150000
    };
}

class Car {
private:
    std::string brand;
    std::string color;
    std::string bodyType;
    int engineVolume;
    int mileage;

public:
    Car();
    Car(std::string b, std::string c, std::string bt, int ev, int m);
    Car(std::string b, std::string c, std::string bt, int ev, age::Mileage m);
    ~Car();

    void setAttributes(std::string b, std::string c, std::string bt, int ev, int m);
    void display() const;
    float averageFuelConsumption() const;
    void reduceMileage(int reduction);

    // Перегрузка операторов
    Car& operator++();   // Префиксный инкремент
    Car operator++(int); // Постфиксный инкремент
    Car& operator--();   // Префиксный декремент
    Car operator--(int); // Постфиксный декремент

    bool operator<(const Car& other) const;
    bool operator>(const Car& other) const;

    friend std::ostream& operator<<(std::ostream& os, const Car& car);

    // Геттеры и сеттеры
    std::string getBrand() const;
    void setBrand(const std::string& b);

    std::string getColor() const;
    void setColor(const std::string& c);

    std::string getBodyType() const;
    void setBodyType(const std::string& bt);

    int getEngineVolume() const;
    void setEngineVolume(int ev);

    int getMileage() const;
    void setMileage(int m);
};