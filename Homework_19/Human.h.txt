#pragma once
#include <iostream>
#include <string>
#include <fstream>

class Human {
private:
    std::string firstName;
    std::string lastName;
    int age;
    double weight;
    double height;
public:
    Human(std::string fName, std::string lName, int a, double w, double h);
    virtual ~Human();

    double calculateBMI();
    int calculateYearOfBirth();
    virtual void print() = 0;
    void setAttributes(std::string fName, std::string lName, int a, double w, double h);
    void readAttributes();
    void saveToFile(std::ofstream& file);

    Human& operator++();
    Human& operator--();
    bool operator<(const Human& other);
    bool operator>(const Human& other);
    friend std::ostream& operator<<(std::ostream& os, Human& h);

    std::string getFirstName();
    void setFirstName(std::string fName);
    std::string getLastName();
    void setLastName(std::string lName);
    int getAge();
    void setAge(int a);
    double getWeight();
    void setWeight(double w);
    double getHeight();
    void setHeight(double h);
};

class Adult : virtual public Human {
private:
    std::string job;
public:
    Adult(std::string fName, std::string lName, int a, double w, double h, std::string job);
    virtual ~Adult();
    std::string getJob();
    void setJob(std::string job);
    void print() override;
};

class Child : virtual public Human {
private:
    std::string school;
public:
    Child(std::string fName, std::string lName, int a, double w, double h, std::string school);
    virtual ~Child();
    std::string getSchool();
    void setSchool(std::string school);
    void print() override;
};

class Teen : public Adult, public Child {
private:
    std::string hobby;
public:
    Teen(std::string fName, std::string lName, int a, double w, double h, std::string job, std::string school, std::string hobby);
    virtual ~Teen();
    std::string getHobby();
    void setHobby(std::string hobby);
    void print() override;
};